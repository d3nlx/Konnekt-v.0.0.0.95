const urlParams = new URLSearchParams(window.location.search);
const contactId = urlParams.get('contactId');

const messagesContainer = document.querySelector('#messages');
const contactInfo = document.querySelector('#contact-info');

let currentUserId = null;

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async function loadCurrentUser() {
  try {
    const res = await fetch('/api/profile');
    if (!res.ok) throw new Error('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
    const user = await res.json();
    currentUserId = user._id;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err);
    alert('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.');
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–º—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
async function loadContactInfo() {
  const res = await fetch(`/api/user/${contactId}`);
  const user = await res.json();
  contactInfo.textContent = `Chat with: ${user.displayName || user.name || user.phonenumber}`;
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
async function loadMessages() {
  if (!currentUserId) {
    console.warn("currentUserId –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω");
    return;
  }

  const res = await fetch(`/api/messages/${contactId}`);
  const messages = await res.json();

  console.log('–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUserId);
  console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', messages);

  renderMessages(messages, currentUserId);
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

// ‚úÖ –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
function renderMessages(messages, currentUserId) {
  messagesContainer.innerHTML = "";

  messages.forEach((message) => {
    const messageDiv = document.createElement("div");
    messageDiv.className = message.sender === currentUserId ? "outgoing" : "incoming";

    const checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.classList.add("message-checkbox");
    checkbox.dataset.messageId = message.id;
    

    const content = document.createElement("span");
    content.textContent = message.message;

    const deleteBtn = document.createElement("button");
    deleteBtn.textContent = "üóëÔ∏è";
    deleteBtn.addEventListener("click", async () => {
      const confirmed = confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ?");
      if (!confirmed) return;

      const selectedIds = getSelectedMessageIds();

      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞–ª–∏, —Ç–æ–∂–µ –±—É–¥–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
      if (!selectedIds.includes(message.id)) {
        selectedIds.push(message.id);
      }

      // –£–¥–∞–ª–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏
      for (const id of selectedIds) {
        await fetch(`/api/messages/${id}`, {
          method: "DELETE",
        });
      }

      loadMessages(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–º
    });

    messageDiv.appendChild(checkbox);
    messageDiv.appendChild(content);
    messageDiv.appendChild(deleteBtn);
    messagesContainer.appendChild(messageDiv);
  });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∏—Ç—å ID –≤—Å–µ—Ö –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
function getSelectedMessageIds() {
  const checkboxes = document.querySelectorAll(".message-checkbox:checked");
  return Array.from(checkboxes).map((cb) => cb.dataset.messageId);
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
document.querySelector('#message-form').addEventListener('submit', async (e) => {
  e.preventDefault();
  const input = document.querySelector('#message-input');
  const text = input.value.trim();
  if (!text) return;

  await fetch('/api/messages', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ receiverId: contactId, message: text })
  });

  input.value = '';
  await loadMessages();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
await loadCurrentUser();
await loadContactInfo();
await loadMessages();
