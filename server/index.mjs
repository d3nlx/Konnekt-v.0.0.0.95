import dotenv from 'dotenv';
import cors from 'cors';
import express from 'express';
import mongoose from 'mongoose';
import passport from 'passport';
import path from 'path';

import { fileURLToPath } from 'url';
import http from 'http';
import { Server } from 'socket.io';
import sharedSession from 'express-socket.io-session';
import sessionMiddleware from './session.js';

import routes from './routes/index.mjs';
import contactsRoutes from './routes/contacts.mjs';
import messagesRouter from './routes/messages.mjs';
import './strategies/local-strategy.mjs';

import { Message } from './models/message.mjs'; // üëà —Ç–≤–æ—è –º–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π
import { User } from './models/user.mjs'; // üëà –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–ª—è displayName

dotenv.config();

const app = express();
const server = http.createServer(app);

// üëá —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—É–∫–∞–∂–∏ —Å–≤–æ–∏)
const ORIGINS = [
  'http://localhost:3000',
  'http://localhost:5173',
  'https://d3nlx.github.io',
  'https://d3nlx.github.io/Konnekt-v.0.0.0.95'
];

app.set('trust proxy', 1);

// CORS –¥–ª—è REST
app.use(cors({
  origin: ORIGINS,
  credentials: true
}));

const io = new Server(server, {
  cors: { origin: ORIGINS, credentials: true }
});
app.set('io', io);

// –ü—É—Ç–∏
const __dirname = path.dirname(fileURLToPath(import.meta.url));

// MongoDB
await mongoose.connect(process.env.MONGO_URI);
console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB Atlas');

// Middleware
app.use(express.json());
app.use(sessionMiddleware);
app.use(passport.initialize());
app.use(passport.session());

// –†–æ—É—Ç—ã
app.use(routes);
app.use('/api/contacts', contactsRoutes);
app.use('/api/messages', messagesRouter);

// –°–µ—Å—Å–∏—è –≤ —Å–æ–∫–µ—Ç–∞—Ö
io.use(sharedSession(sessionMiddleware, { autoSave: true }));

io.on('connection', (socket) => {
  const userId = socket.handshake.session?.passport?.user;
  if (!userId) return socket.disconnect();

  socket.join(userId);
  console.log(`üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è`);

  // üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  socket.on('send_message', async ({ to, message, replyTo, forwardedFrom }) => {
    try {
      const from = userId;
      const sender = await User.findById(from).lean();

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
      const msgDoc = await Message.create({
        sender: from,
        receiver: to,
        message,
        replyTo,
        forwardedFrom,
        timestamp: Date.now()
      });

      const payload = {
        id: msgDoc._id.toString(),
        from,
        to,
        message,
        timestamp: msgDoc.timestamp,
        replyTo,
        forwardedFrom,
        senderName: sender.displayName || sender.name || "User"
      };

      // —Ä–∞—Å—Å—ã–ª–∞–µ–º –æ–±–µ–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º
      io.to(to).emit('new_message', payload);
      io.to(from).emit('new_message', payload);

      // –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—é
      io.to(to).emit('contact_added', { from });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err);
    }
  });

  // üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  socket.on('edit_message', async ({ id, newText }) => {
    try {
      const msg = await Message.findOneAndUpdate(
        { _id: id, sender: userId },
        { message: newText, edited: true },
        { new: true }
      );

      if (msg) {
        const payload = {
          id: msg._id.toString(),
          message: msg.message,
          timestamp: msg.timestamp
        };
        io.to(msg.receiver.toString()).emit('message_edited', payload);
        io.to(userId).emit('message_edited', payload);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:", err);
    }
  });

  // ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
  socket.on('delete_message', async ({ to, ids }) => {
    try {
      await Message.deleteMany({
        _id: { $in: ids },
        $or: [
          { sender: userId },
          { receiver: userId }
        ]
      });

      io.to(to).emit('messages_deleted', { ids });
      io.to(userId).emit('messages_deleted', { ids });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", err);
    }
  });

  // üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ
  socket.on('pin_message', async ({ chatId, messageId }) => {
    try {
      await Message.updateMany(
        { chatId },
        { $set: { pinned: false } }
      );
      await Message.findByIdAndUpdate(messageId, { pinned: true });

      io.to(chatId).emit('message_pinned', { messageId });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏:", err);
    }
  });

  socket.on('disconnect', () => {
    console.log(`üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
  });
});

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä + —Å–æ–∫–µ—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã –Ω–∞ http://localhost:${PORT}`);
});


/*
 –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª —á—Ç–æ –±—ã –≤—Å–µ —Ä–∞–±–æ—Ç–∞–ª–æ —Å —Å–æ–∫–µ—Ç–∞–º–∏
*/